{"version":3,"sources":["components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["User","props","name","email","address","react_default","a","createElement","class","street","suite","sity","zipcode","geo","lat","lng","Comment","body","CommentList","id","arrForId","comments","filter","comment","i","postId","map","Comment_Comment","Post","title","user","User_User","Object","assign","key","CommentList_CommentList","PostList","postsWithUsers","postsWithUser","Post_Post","Search","search","value","Fragment","type","onChange","BASE_URL","App","_Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadData","makeRequest","concat","handlePOSTsLoad","handleUsersLoad","handleCommentsLoad","xhr","setState","prevState","posts","JSON","parse","responseText","isPOSTSLoaded","loadingCount","users","isUsersLoaded","checkData","isCommentsLoaded","event","searchBy","target","filteredPostsWithUsers","post","includes","state","inherits","createClass","url","cb","XMLHttpRequest","open","addEventListener","send","_this$state","usersMap","reduce","acc","objectSpread","defineProperty","userId","_this$state2","isLoaded","isLoading","button","disabled","onClick","Search_Search","PostList_PostList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed3b01ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport './User.css';\r\n\r\nexport const User = props => {\r\n  const {\r\n    name,\r\n    email,\r\n    address,\r\n  } = props;\r\n  return (\r\n    <div class = \"user\">   \r\n    <p>\r\n     <strong>Name of auhtor:</strong>\r\n    </p>\r\n    <p>       \r\n    {name}\r\n    </p>\r\n    <p>\r\n     <strong>Email:</strong>\r\n    </p>\r\n    <p>\r\n    {email}\r\n    </p>\r\n    <p>\r\n     <strong>Address:</strong>\r\n    </p>\r\n    <p>\r\n    {address.street}\r\n    </p>\r\n    <p>\r\n    {address.suite}\r\n    </p>\r\n    <p>\r\n    {address.sity}\r\n    </p>\r\n    <p>\r\n    {address.zipcode}\r\n    </p>\r\n    <p>\r\n    <p>{address.geo.lat}</p>\r\n    {address.geo.lng}\r\n    </p>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport './CommentList.css';\r\n\r\nexport const Comment = props => {\r\n   const {\r\n       name,\r\n       email,\r\n       body,\r\n   } = props;\r\n   return (\r\n       <div class = \"comment\">\r\n            <p>\r\n            <strong>Comments name:</strong>\r\n            </p>\r\n            <p>   \r\n            {name}\r\n            </p>\r\n            <p>\r\n            <strong>Email:</strong>\r\n            </p>\r\n            <p>\r\n            {email}\r\n            </p>\r\n            <p>\r\n            <strong>Content of comment:</strong>\r\n            </p>\r\n            <p>\r\n            {body}\r\n            </p>\r\n       </div>\r\n   );\r\n};","import React from 'react';\r\nimport { Comment } from './Comment';\r\n\r\nexport const CommentList = props => {\r\n  const {\r\n    id,\r\n    comments\r\n  } = props;\r\n    let arrForId = comments.filter(function (comment, i, comments){\r\n      return comment.postId === id;\r\n    });\r\n  return (\r\n    <div >\r\n    {arrForId.map((comment, i) => {\r\n      return (\r\n        <Comment body={comment.body} name={comment.name} email={comment.email}/>\r\n      );\r\n    })}\r\n    </div>\r\n  );\r\n};","import React from 'react';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\n\nexport const Post = props => {\n const {\n   id,\n   title,\n   user,\n   body,\n   comments,\n } = props;\n\n  return (\n    <div class = \"post\">   \n      <p>\n      <strong>Title of post:</strong>\n      </p>\n      <p>       \n      {title}\n      </p>\n      <p>\n      <strong>Post content:</strong>\n      </p>\n      <p>\n      {body}\n      </p>\n      <p>\n      <User key={props.id} {...user}/>\n      </p>\n      <p>\n      <CommentList id={id} comments={comments}/>\n      </p>\n    </div>\n  );\n};","import React from 'react';\nimport { Post } from \"./Post\";\n\nexport const PostList = props => {\n  const {\n    postsWithUsers,\n    comments\n  } = props;\n    \n  return (\n    <div>\n      {postsWithUsers.map((postsWithUser) => {\n        return (\n          <Post key={postsWithUser.id} {...postsWithUser} comments={comments}/>\n        );\n      })}\n    </div>\n    );\n  };","import React from 'react'\r\n\r\nexport const Search = props => {\r\n  const { search, value } = props;\r\n    return (\r\n      <>\r\n        <input type=\"text\" onChange={search} value={value}/>\r\n      </>\r\n    )\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { PostList } from \"./components/PostList\";\nimport { Search } from './components/Search';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: null,\n      users: null,\n      comments: null,\n      isPOSTSLoaded: false,\n      isUsersLoaded: false,\n      isCommentsLoaded: false,\n      loadingCount: 0,\n      postsWithUsers: null,\n      filteredPostsWithUsers: null,\n      searchBy: ''\n    };\n  }\n\n  loadData = () => {\n    this.makeRequest(`${BASE_URL}/posts`, this.handlePOSTsLoad);\n    this.makeRequest(`${BASE_URL}/users`, this.handleUsersLoad);\n    this.makeRequest(`${BASE_URL}/comments`, this.handleCommentsLoad);\n  };\n\n  handlePOSTsLoad = xhr => () => {\n    this.setState(prevState => ({\n      posts: JSON.parse(xhr.responseText),\n      isPOSTSLoaded: true,\n      loadingCount: prevState.loadingCount - 1,\n    }\n    ));\n  };\n\n  handleUsersLoad = xhr => () => {\n    this.setState(\n      prevState => ({\n        users: JSON.parse(xhr.responseText),\n        isUsersLoaded: true,\n        loadingCount: prevState.loadingCount - 1,\n      }),\n      this.checkData\n    );\n  };\n\n  handleCommentsLoad = xhr => () => {\n    this.setState(\n      prevState => ({\n        comments: JSON.parse(xhr.responseText),\n        isCommentsLoaded: true,\n        loadingCount: prevState.loadingCount - 1,\n      }),\n      this.checkData\n    );\n  };\n\n  makeRequest(url, cb) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.addEventListener('load', cb(xhr));\n    xhr.send();\n    this.setState(prevState => ({ loadingCount: prevState.loadingCount + 1 }));\n  }\n\n   search = (event) => {\n     const searchBy = event.target.value;\n     this.setState(prevState => {\n       const filteredPostsWithUsers = prevState.postsWithUsers.filter(post => post.title.includes(searchBy) || post.body.includes(searchBy));\n       return {\n         searchBy,\n         filteredPostsWithUsers\n       };\n     });\n   }\n\n  checkData() {\n    const { isPOSTSLoaded, isUsersLoaded, isCommentsLoaded, comments, users, posts } = this.state;\n    if (isPOSTSLoaded && isUsersLoaded && isCommentsLoaded) {\n      const usersMap = users.reduce((acc, user) => ({ ...acc, [user.id]: user }), {});\n      const postsWithUsers = posts.map(post => ({ ...post, user: usersMap[post.userId] }));\n      this.setState({\n        filteredPostsWithUsers: postsWithUsers,\n        postsWithUsers,\n        comments\n      });\n    }\n\n  }\n\n  render() {\n    const {\n      isPOSTSLoaded,\n      isUsersLoaded,\n      isCommentsLoaded,\n      loadingCount,\n      filteredPostsWithUsers,\n      searchBy,\n      comments\n    } = this.state;\n\n    const isLoaded = isPOSTSLoaded && isUsersLoaded && isCommentsLoaded && filteredPostsWithUsers !== null;\n    const isLoading = loadingCount !== 0;\n\n    const button = (\n      <button\n        type=\"button\"\n        disabled={isLoaded}\n        onClick={this.loadData}\n      >\n        {isLoading ? 'Loading...' : 'Load data'}\n      </button>\n    );\n\n    if (!isLoaded) {\n      return button;\n    }\n\n    return (\n      <>\n        <Search search={this.search} value={searchBy} />\n        {button}\n        <PostList postsWithUsers={filteredPostsWithUsers} comments={comments}/>\n      </>\n    );\n  }\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}